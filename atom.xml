<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猿视界</title>
  <subtitle>不仅要明白是什么，更要清楚为什么。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-04T15:18:57.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>冯生伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/07/04/%E8%A7%A3%E5%86%B3%E7%BB%99xib%E4%B8%AD%E7%9A%84button%E8%AE%BE%E7%BD%AE%E5%80%92%E8%AE%A1%E6%97%B6title%E9%97%AA%E7%83%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/07/04/解决给xib中的button设置倒计时title闪烁的问题/</id>
    <published>2017-07-04T15:18:57.000Z</published>
    <updated>2017-07-04T15:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前一直是纯代码编写开发APP，最近开始在项目里使用xib和storyboard，摸索了一整天，终于算基本掌握，但临近下班时，发现了一个很奇葩的问题…</p>
<h3 id="问题场景是这样的"><a href="#问题场景是这样的" class="headerlink" title="问题场景是这样的:"></a>问题场景是这样的:</h3><blockquote>
<p>用户修改绑定手机号时，需要获取验证码，然后按钮显示60秒倒计时，在此期间按钮点击失效，并每隔一秒通过setTile:forState方法更新按钮标题，显示倒计时。</p>
</blockquote>
<p>最初的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString *title = [NSString stringWithFormat:@&quot;%ld秒后重试&quot;, self.count];</div><div class="line">[self.getCheckCodeButton setTitle:title forState:UIControlStateDisabled];</div></pre></td></tr></table></figure>
<p>这应该是一个大家非常熟悉的一个常规需求，在以前使用纯代码编写时，不会有任何问题，然而今天的奇葩显现是，每次调用setTitle更新按钮标题时，都会消失一下再显示，看起来就是每个一秒的闪烁显示，特别酷炫（哈哈哈！），然而这<strong>并不是此刻我们需要的效果…</strong></p>
<h2 id="怎么办呢？"><a href="#怎么办呢？" class="headerlink" title="怎么办呢？"></a>怎么办呢？</h2><p>悄悄地去度娘一搜，还真有不少小伙伴也碰到了同样的问题，先来说说网上搜到的方法：</p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在storyboard找到这个不老实的button，将他的type设置为Custom，默认是System。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-b851b9263a49c7ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="默认值System.png"></p>
<p>修改之后如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-18aca979a2c4d471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="改成Custom.png"></p>
<p>很不幸的是，这种最简单的操作方式，在我这里 <strong>并没有奏效</strong> …  <strong>并没有奏效</strong> … <strong>并没有奏效</strong> <strong>!!!!!!</strong><br>幸好网络资源棒棒哒，很快我又找到了另一种方法。</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>这个方法虽然奏效，但我觉得很奇葩，很扯蛋，哈哈，可能奇葩的问题需要奇葩的方法，想出这个方法的同学其实还是很腻害的，<strong>膜拜！哈哈！！！</strong><br>下面来看这位同学的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *title = [NSString stringWithFormat:@&quot;%ld秒后重试&quot;, self.count];</div><div class="line">self.getCheckCodeButton.titleLabel.text = title; // 这一句很重要，是关键，而且必须在setTitle之前，别问我为什么，我不知道，捂脸 捂脸 捂脸</div><div class="line">[self.getCheckCodeButton setTitle:title forState:UIControlStateDisabled];</div></pre></td></tr></table></figure>
<p>如注释所示，就是在setTitle之前，直接通过titleLabel给按钮标题赋值，然后再setTitle，这两行代买一个字都不能少，而且不需是这个顺序，setTitle断后。</p>
<blockquote>
<p>这个方法虽然能解决问题，但对于有代码洁癖的人，怎么能接受这么奇葩的使用方式？？？<br>于是通过高人指点，最终的完美解决方案诞生了…看方法三</p>
</blockquote>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>先来看优雅的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *title = [NSString stringWithFormat:@&quot;%ld秒后重试&quot;, self.count];</div><div class="line">[UIView performWithoutAnimation:^&#123;</div><div class="line">        [self.getCheckCodeButton setTitle:title forState:UIControlStateDisabled];</div><div class="line">        [self.getCheckCodeButton layoutIfNeeded];</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>现在我们先来谈谈出现闪烁问题的根本原因，通过xib创建的button，在setTitle的时候，默认添加了一个隐式的fade动画，使得title的更新是一个渐变的过程，而这个动画时间慢到了我们肉眼完全可以的感知的速度，于是出现了我们看到的闪烁，所以解决问题的关键，当然就是去禁用这个该死的动画了，而UIView的API里就已经提供了我们禁用隐式动画的block方法了，到此，问题完美解决！！！！</p>
<p>多些高人指点，觉得有记录和分享价值，睡前坚持把字码起来，希望小伙伴们喜欢！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前一直是纯代码编写开发APP，最近开始在项目里使用xib和storyboard，摸索了一整天，终于算基本掌握，但临近下班时，发现了一个很奇葩的问题…&lt;/p&gt;
&lt;h3 id=&quot;问题场景是这样的&quot;&gt;&lt;a href=&quot;#问题场景是这样的&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谈一谈我对属性，成员变量，实例变量，以及传说中的@property，@synthesize，@dynamic的认识</title>
    <link href="http://yoursite.com/2017/06/14/%E8%B0%88%E4%B8%80%E8%B0%88%E6%88%91%E5%AF%B9%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%EF%BC%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84-property%EF%BC%8C-synthesize%EF%BC%8C-dynamic%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2017/06/14/谈一谈我对属性，成员变量，实例变量，以及传说中的-property，-synthesize，-dynamic的认识/</id>
    <published>2017-06-14T09:11:18.000Z</published>
    <updated>2017-06-14T09:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-属性，成员变量，实例变量"><a href="#一-属性，成员变量，实例变量" class="headerlink" title="一. 属性，成员变量，实例变量"></a>一. 属性，成员变量，实例变量</h2><p>在讨论之前我先给大家推荐一个 <strong>NSObject</strong> 的类扩展 <strong>NSObject+DLIntrospection</strong> 利用 runtime，扩展了获取类的属性，实例变量，实例方法，类方法，协议protocol 等列表的方法，后面的讲解我们需要用到它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface NSObject (DLIntrospection)</div><div class="line"></div><div class="line">+ (NSArray *)classes; // 获取所有的类名</div><div class="line">+ (NSArray *)properties; // 获取属性列表</div><div class="line">+ (NSArray *)instanceVariables; // 获取实例变量列表</div><div class="line">+ (NSArray *)classMethods; // 获取类方法列表（+方法）</div><div class="line">+ (NSArray *)instanceMethods; // 获取实例方法列表（-方法）</div><div class="line">+ (NSArray *)protocols;  // 获取协议列表</div><div class="line">+ (NSDictionary *)descriptionForProtocol:(Protocol *)proto;</div><div class="line">+ (NSString *)parentClassHierarchy; // 当前类的继承关系</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>废话少说，先看代码<br>.h 源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@interface HMTestClass : NSObject</div><div class="line">&#123;</div><div class="line">    NSString *_ivarInterface; // 实例变量，在iOS开发中也叫成员变量</div><div class="line">&#125;</div><div class="line">@property (nonatomic, copy) NSString *propertyInterface;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>再看 .m 源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@interface HMTestClass ()</div><div class="line">@property (nonatomic, copy) NSString *propertyImplementation;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation HMTestClass</div><div class="line">&#123;</div><div class="line">    NSString *_ivarImplementation; // 实例变量，在iOS开发中也叫成员变量</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>最后咱们看看调试输出结果<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取属性输出结果</span></div><div class="line">(lldb) po [HMTestClass properties]</div><div class="line">&lt;__NSArrayI <span class="number">0x100200c40</span>&gt;(</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* propertyImplementation,</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* propertyInterface</div><div class="line">)</div></pre></td></tr></table></figure></p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取实例变量输出结果</span></div><div class="line">(lldb) po [HMTestClass instanceVariables]</div><div class="line">&lt;<span class="variable">__NSArrayI</span> <span class="number">0</span>x100300430&gt;(</div><div class="line">NSString* <span class="variable">_ivarInterface</span>,</div><div class="line">NSString* <span class="variable">_ivarImplementation</span>,</div><div class="line">NSString* <span class="variable">_propertyInterface</span>,</div><div class="line">NSString* <span class="variable">_propertyImplementation</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="看到这里，我们首先可以得出结论："><a href="#看到这里，我们首先可以得出结论：" class="headerlink" title="看到这里，我们首先可以得出结论："></a>看到这里，我们首先可以得出结论：</h3><ol>
<li><strong>属性</strong> 即用 <strong>@property</strong>  声明的部分，它可以在 .h 文件里，也可以在 .m 文件里，在 .m 里即为私有属性；</li>
<li>而 <strong>实例变量</strong> 即为被包含在 @interface 和 @implementation 下的大括号里的，以及 @property 时编译器为我们自动生成的两部分组成；</li>
</ol>
<blockquote>
<p>我们还看到用 <strong>@property</strong> 声明的属性 propertyInterface 和 propertyImplementation，编译器自动给我们生成了对应以下划线 _ 开头的 <strong>实例变量</strong>，这一部分也是个学问，后一部分再讲</p>
</blockquote>
<p>关于 <strong>成员变量</strong> 我认为就是 <strong>实例变量</strong>，两者等价，又或者仅仅只是 @interface 下的部分。<br><strong>当然有官方更准确的描述的，非常非常欢迎感谢前来指正！！！</strong></p>
<blockquote>
<p>概括一下：<br>咱们用比喻的修辞手法来说，<strong>属性</strong> 是个口袋，属性名称描述它是上衣口袋，裤兜，还是其他位置的口袋，没有有实际意义，只让外界看到有一个口袋，当然口袋也可以缝在里面（在 .m 文件里声明），只有自己知道，当然放在外面的，也有可能只是看起来像个口袋，不能装东西（.m 里使用了 @dynamic 但忘记自己实现 set get，后面再详细介绍），而 <strong>实例变量</strong> 就是在口袋里存放的实实在在的东西。</p>
</blockquote>
<h2 id="二-property，-synthesize，-dynamic"><a href="#二-property，-synthesize，-dynamic" class="headerlink" title="二. @property，@synthesize，@dynamic"></a>二. @property，@synthesize，@dynamic</h2><ul>
<li><strong>@property</strong> <ul>
<li>属性声明关键字，有三个类别的关键词分别描述该属性的：线程限制，内存管理，读写权限三方面的表现，默认情况下，基本数据类型为 atomic, assign, readwrite，OC 对象为 atomic, strong, readwrite</li>
<li>若 .m 文件不使用 @synthesize 和 @dynamic，编译器会自动生成属性的 set get 方法，并生成 已下划线 _ 加属性名的实例变量；</li>
</ul>
</li>
<li><strong>@synthesize</strong> <ul>
<li>@synthesize property; 这种情况下，编译器生成的实例变量没有了下滑下；</li>
<li>@synthesize property = _ivar; 这种情况下，编译器不再生成实例变量，对 property 调用set get 实际操作的是 _ivar 实例变量，即这个口袋里放的是 _ivar;</li>
</ul>
</li>
<li><strong>@dynamic</strong><ul>
<li>@dynamic property; 编译器不会生成实例变量，同时也不会实现 set get 方法，需要开发者自己手写，如若忘记自己实现 set get，碰到对 set get 进行的调用的地方，程序会 crash，报unrecognized selector的异常</li>
</ul>
</li>
</ul>
<p><br><br>end</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-属性，成员变量，实例变量&quot;&gt;&lt;a href=&quot;#一-属性，成员变量，实例变量&quot; class=&quot;headerlink&quot; title=&quot;一. 属性，成员变量，实例变量&quot;&gt;&lt;/a&gt;一. 属性，成员变量，实例变量&lt;/h2&gt;&lt;p&gt;在讨论之前我先给大家推荐一个 &lt;stro
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HMExpressionEvaluator——一个使用简单又强大的表达式计算库</title>
    <link href="http://yoursite.com/2017/06/14/HMExpressionEvaluator%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E5%8F%88%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%BA%93/"/>
    <id>http://yoursite.com/2017/06/14/HMExpressionEvaluator——一个使用简单又强大的表达式计算库/</id>
    <published>2017-06-14T09:03:23.000Z</published>
    <updated>2017-06-15T02:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/IOSLittleWhite/HMExpressionEvaluator" target="_blank" rel="external"> <strong>demo下载地址</strong></a></p>
<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><ol>
<li><p>一个数学表达式计算器，能实现和 <strong>UIWebView</strong> 的 stringByEvaluatingJavaScriptFromString: 一样的计算效果，但效率要高很多，可以在子线程中执行；</p>
</li>
<li><p>基本全面覆盖 <strong>NSExpression</strong> 的 expressionForFunction:arguments 中的所有function，使用要比 <strong>NSExpression</strong> 简单很多，只需将注意力放大expression表达式的编辑上，将任意复杂度的表达式，通过eval:方法传入便可轻松得到计算结果；</p>
</li>
<li><p>支持复杂加减乘除四则运算，与或非逻辑运算，和大于小于等比较运算；</p>
</li>
<li><p>支持三目运算；</p>
</li>
<li><p>表达式中能自动识别处理的函数，基本全部覆盖<strong>NSExpression</strong>，有的未实现的，因为可以自己有数学表达式表达，比如 a+b，这个表达式计算最基本功能，无需通过函数调用来实现；</p>
</li>
<li><p>以上所述的计算类型在符合数学表达式逻辑的前提下，可以组合在一个表达式中，函数支持嵌套调用；</p>
</li>
<li><p>支持字符串相加（字符串拼接）；</p>
</li>
<li><p>开发者可以扩展自己的函数，通过构建 <strong>HMExpressionFunction</strong> 对象来声明自定义的函数，详细使用方式可以参考 demo。</p>
</li>
</ol>
<h2 id="二-使用方式"><a href="#二-使用方式" class="headerlink" title="二. 使用方式"></a>二. 使用方式</h2><ol>
<li><p>引入头文件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import&quot;HMExpressionEvaluator.h&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>**HMExpressionEvaluator.h** 文件中只声明了4个方法：&lt;br&gt;
- -(id)eval:(NSString *)expression // 用于传入表达式进行计算并返回计算结果&lt;br&gt;
- -(void)setCustomFunctions:(NSDictionary *)customFunctions // 用于给开发者注册自定义方法&lt;br&gt;
- -(void)setDateFormatter:(NSDateFormatter *)dateFormatter // 设置支持的日期格式，默认只支持 yyyy-MM-dd HH:mm:ss 格式&lt;br&gt;
- -(void)withoutFunctionTransfer:(BOOL)withoutFunction; // 不支持函数调用，仅用于计算纯数学表达式，默认为支持函数调用&lt;br&gt;&lt;br&gt;
</code></pre><p>  开发者仅需通过这4个 <strong>API</strong> 来使用表达式计算全部功能<br><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// HMExpressionEvaluator.h</div><div class="line"></div><div class="line">   @interface HMExpressionEvaluator : NSObject</div><div class="line"></div><div class="line">#pragma mark - API</div><div class="line">/**</div><div class="line"> *  表达式计算</div><div class="line"> *</div><div class="line"> *  @param expression 需要计算的表达式</div><div class="line"> *</div><div class="line"> *  @return 计算结果</div><div class="line"> */</div><div class="line">- (id)eval:(NSString *)expression;</div><div class="line"></div><div class="line">/**</div><div class="line"> *	设置开发者自定义的函数集</div><div class="line"> *</div><div class="line"> *  @param customFunctions 每个函数用 HMExpressionCustomFunction 对象来描述，以函数名为 key</div><div class="line"> *                         </div><div class="line"> */</div><div class="line">- (void)setCustomFunctions:(NSDictionary *)customFunctions;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  设置支持的日期格式，默认只支持 yyyy-MM-dd HH:mm:ss 格式</div><div class="line"> *</div><div class="line"> *  @param dateFormat 日期格式</div><div class="line"> */</div><div class="line">- (void)setDateFormat:(NSString *)dateFormat;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  不支持函数调用，仅用于计算纯数学表达式，默认为支持函数调用</div><div class="line"> */</div><div class="line">- (void)withoutFunctionTransfer:(BOOL)withoutFunction;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<ol>
<li><p>具体使用方式</p>
<ol>
<li><p>支持的数学运算操作符和操作数类型</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">typedef NS_ENUM(NSInteger, HMExpressionNodeType)</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * 未知  0</div><div class="line">     */</div><div class="line">    Unknown,  </div><div class="line">      </div><div class="line">    /**</div><div class="line">     * + 加</div><div class="line">     */</div><div class="line">    Plus,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * - 减</div><div class="line">     */</div><div class="line">    Subtract,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * * 乘</div><div class="line">     */</div><div class="line">    MultiPly,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * / 除</div><div class="line">     */</div><div class="line">    Divide,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ( 左括号</div><div class="line">     */</div><div class="line">    LParentheses,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ) 右括号</div><div class="line">     */</div><div class="line">    RParentheses,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * % 求模,取余</div><div class="line">     */</div><div class="line">    Mod,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ^ 幂运算</div><div class="line">     */</div><div class="line">    Power,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &lt;&lt; 左移位</div><div class="line">     */</div><div class="line">    LShift,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &gt;&gt; 右移位</div><div class="line">     */</div><div class="line">    RShift,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &amp; 按位与</div><div class="line">     */</div><div class="line">    BitwiseAnd,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * | 按位或</div><div class="line">     */</div><div class="line">    BitwiseOr,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &amp;&amp; 逻辑与</div><div class="line">     */</div><div class="line">    And,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * || 逻辑或</div><div class="line">     */</div><div class="line">    Or,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ! 逻辑非</div><div class="line">     */</div><div class="line">    Not,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * == 比较等</div><div class="line">     */</div><div class="line">    Equal,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * != 或 &lt;&gt; 比较不等</div><div class="line">     */</div><div class="line">    Unequal,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &gt; 比较大于</div><div class="line">     */</div><div class="line">    GT,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &lt; 比较小于</div><div class="line">     */</div><div class="line">    LT,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &gt;= 比较大于等于</div><div class="line">     */</div><div class="line">    GTOrEqual,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &lt;= 比较小于等于</div><div class="line">     */</div><div class="line">    LTOrEqual,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 数值</div><div class="line">     */</div><div class="line">    Numeric,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 字符串</div><div class="line">     */</div><div class="line">    String,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 日期时间</div><div class="line">     */</div><div class="line">    Datetime</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>使用示例</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 简单四则运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;22 + 33 * 66 + 3^5&quot;]; // 3^5 3的5次方</div><div class="line"></div><div class="line">// 简单比较运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;5 &lt; 6&quot;];</div><div class="line"></div><div class="line">// 逻辑运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;5 &lt; 3 || 6 &gt; 5)&quot;];</div><div class="line"></div><div class="line">// 位运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;4 &lt;&lt; 5&quot;];</div><div class="line"></div><div class="line">// 字符串相加</div><div class="line">[HMExpressionEvaluator eval:@&quot;\&quot;Hello\&quot; + \&quot; \&quot; + \&quot;World\&quot; &lt;&lt; 5&quot;];</div></pre></td></tr></table></figure>
</li>
<li><p>包含函数的运算</p>
<ol>
<li><p>支持的函数清单</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">	// 逻辑运算类</div><div class="line">    ternaryOperation(5&lt;7, \&quot;真\&quot;, \&quot;假\&quot;) // 三目表达式</div><div class="line"></div><div class="line">    日期类处理方法, 日期字符串格式要求为：yyyy-MM-dd或者yyyy-MM-dd HH:mm:ss</div><div class="line">    dateDiff(差值类型, 较早日期, 较晚日期) // 时间差值</div><div class="line">    getYear(date) // 获取日期中的年份</div><div class="line">    getQuarter(date) // 获取日期中的第几季度</div><div class="line">    getLocalQuarter(date) // 获取日期中的中文第几季度</div><div class="line">    getMonth(date) // 获取日期中的月份</div><div class="line">    getLocalMonth(date) // 获取日期中的中文月份</div><div class="line">    getWeek(date) // 获取日期中的第几周</div><div class="line">    getLocalWeek(date) // 获取日期中的中文第几周</div><div class="line">    getDayOfWeek(date) // 获取日期中的星期几</div><div class="line">    getLocalDayOfWeek(date) // 获取日期中的中文星期几</div><div class="line">    getDay(date) // 获取日子</div><div class="line">    getLocalDay // 获取中文日子</div><div class="line">    now() // 获取现在时间</div><div class="line"></div><div class="line">    // 数值类</div><div class="line">    getLocalMoney(digit) // 将数值转换为大写金额</div><div class="line">    round(digit) // 数值四舍五入</div><div class="line">    ceil(digit) // 数值0舍1入</div><div class="line">    trunc(digit) // 向下取整</div><div class="line">    floor(digit) // 向下取整</div><div class="line">    abs(digit) // 求绝对值</div><div class="line">    sqrt(digit) // 开平方</div><div class="line">    log(digit) // 底数为e对数</div><div class="line">    ln(digit) // 底数为e对数</div><div class="line">    log10(digit) // 底数为10对数</div><div class="line">    log2(digit) // 底数为2对数</div><div class="line">    raiseToPower(x, n) // 计算 x 的 n 次方</div><div class="line">    exp(digit) // 求e的x次方</div><div class="line">    bitwiseXor(a, b) // a 异或 b</div><div class="line">    onesComplement(a) // a 的补码</div><div class="line">    average(digit, digit, ...) // 求平均</div><div class="line">    sum(digit, digit, ...) // 求和</div><div class="line">    count(digit, digit, ...) // 计数</div><div class="line">    min(digit, digit, ...) // 找最小值</div><div class="line">    max(digit, digit, ...) // 找最大值</div><div class="line">    median(digit, digit, ...) // 找中值</div><div class="line">    mode(digit, digit, ...) // 一数组或数据区域中出现频率最多的数值</div><div class="line">    stddev(digit, digit, ...) // 样本标准偏差</div><div class="line">    random(void) // 获取随机数小数</div><div class="line">    randomn(digit) // 获取随机数整数</div><div class="line"></div><div class="line">    // 字符串类</div><div class="line">    contains(&quot;待检字符串&quot;, &quot;被包含字符串&quot;) // 检查包含子字符串</div><div class="line">    unContains(&quot;待检字符串&quot;, &quot;不被包含字符串&quot;) // 检查不包含子字符串</div><div class="line">    lowercase(&quot;字符串&quot;) // 转小写</div><div class="line">    uppercase(&quot;字符串&quot;) // 转大写</div><div class="line">	``` </div><div class="line">2. 调用方式</div><div class="line">	</div><div class="line">	```Objective-C</div><div class="line">	// 三目运算函数</div><div class="line">	[HMExpressionEvaluator eval:@&quot;ternaryOperation(5&lt;7, \&quot;真\&quot;, \&quot;假\&quot;)&quot;];</div><div class="line">	</div><div class="line">	// 获取大写金额</div><div class="line">	[HMExpressionEvaluator eval:@&quot;getLocalMoney(10086)&quot;];</div><div class="line">	</div><div class="line">	// 复杂混合运算表达式</div><div class="line">	[HMExpressionEvaluator eval:@&quot;dateDiff(\&quot;dd\&quot;, \&quot;2016-12-17\&quot;, now()) * 10 - getYear(now()) + max(11, 22,33,1000) * sqrt(floor(1000.445))&quot;];</div></pre></td></tr></table></figure>
</li>
<li><p>自定义函数的使用，以 demo 为例：<br> <br><br><strong>第一步：自定义方法的OC实现</strong><br> <br><br>demo 中在 ViewController.m 实现了如下四个方法，可以看到返回时，均构建了 HMExpressionCustomFunctionResult 类实例来返回，这是必须的；<br> <br> 方法中传入的 param 会根据表达式中调用函数时括号内传入的参数情况解析成字符串，一维数组，或者二维数组，具体规则看如下代码段的注释。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 自定义函数测试</div><div class="line">/*</div><div class="line"> *  不带参函数</div><div class="line"> *  在表达式中写入 test1()</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test1</div><div class="line">&#123;</div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:@&quot;测试不带参函数&quot;</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString] ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  带一个加单参数的函数</div><div class="line"> *</div><div class="line"> *  @param param 如在表达式中写：test2(123) 则此处 param 为: @&quot;123&quot;</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test2:(id)param</div><div class="line">&#123;</div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:[NSString stringWithFormat:@&quot;测试带参函数，传入参数为：%@&quot;, param]</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  一维多参函数，将所有参数拼接成一个字符串</div><div class="line"> *  如表达式中写：test3(123, 456, 789...) 数量根据自己的需要来定</div><div class="line"> *</div><div class="line"> *  @param param 此处得到 param 为一维数组 @[@&quot;123&quot;, @&quot;456&quot;, @&quot;789&quot;...]</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test3:(id)param</div><div class="line">&#123;</div><div class="line">    // 将所有参数拼接成一个字符串</div><div class="line">    </div><div class="line">    NSMutableString *result = [NSMutableString string];</div><div class="line">    for(NSString *str in param)</div><div class="line">    &#123;</div><div class="line">        [result appendString:str];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:result</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  二维多参函数，函数功能为将所有参数拼接为字符串</div><div class="line"> *  如表达式中写：test3(123, [456, 789], @&quot;333&quot;, [234]...) 数量根据自己的需要来定</div><div class="line"> *</div><div class="line"> *  @param param 此处得到 param 为二维数组 @[@&quot;123&quot;, @[@&quot;456&quot;, @&quot;789&quot;], @&quot;333&quot;, @[@&quot;234&quot;]...]</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test4:(id)param</div><div class="line">&#123;</div><div class="line">    NSMutableString *result = [NSMutableString string];</div><div class="line">    </div><div class="line">    for(id obj in param)</div><div class="line">    &#123;</div><div class="line">        if([obj isKindOfClass:[NSArray class]])</div><div class="line">        &#123;</div><div class="line">            for(NSString *str in (NSArray *)obj)</div><div class="line">            &#123;</div><div class="line">                [result appendString:str];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            [result appendString:obj];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:result</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>第二步：构建 HMExpressionCustomFunction 实例</strong><br> <br><br>如下代码将上述四个 test 方法分别构建一个 HMExpressionCustomFunction 实例来进行描述，并以用于表达式调用的函数名为 key 存入字典，准备注入表达式解析计算器中。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (NSDictionary *)customFunctions</div><div class="line">&#123;</div><div class="line">    if(!_customFunctions)</div><div class="line">    &#123;</div><div class="line">        _customFunctions = [NSMutableDictionary dictionary];</div><div class="line">        // test1 无参函数</div><div class="line">        HMExpressionCustomFunction *function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test1&quot;</div><div class="line">                                                                                                         selector:@selector(test1)</div><div class="line">                                                                                                           target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">        // test2 带一个参数的函数</div><div class="line">        function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test2&quot;</div><div class="line">                                                                        selector:@selector(test2:)</div><div class="line">                                                                          target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">        // test3 带多个一维参数的函数</div><div class="line">        function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test3&quot;</div><div class="line">                                                                        selector:@selector(test3:)</div><div class="line">                                                                          target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">        // test4 带多个二维参数的函数</div><div class="line">        function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test4&quot;</div><div class="line">                                                                        selector:@selector(test4:)</div><div class="line">                                                                          target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">    &#125;</div><div class="line">    return _customFunctions;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>第三步：将构建好的 HMExpressionCustomFunction 实例注入表达式解析计算器</strong><br> <br><br>代码如下，即在 demo 中点击 “计算” 按钮时执行的代码</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  创建表达式计算器对象</div><div class="line"> */</div><div class="line">- (HMExpressionEvaluator *)evaluator</div><div class="line">&#123;</div><div class="line">    if(!_evaluator)</div><div class="line">    &#123;</div><div class="line">        _evaluator = [[HMExpressionEvaluator alloc] init];</div><div class="line">        [_evaluator setCustomFunctions:self.customFunctions]; // 注入自定义函数集</div><div class="line">        </div><div class="line">         // 默认就是这个格式</div><div class="line">         // [_evaluator setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;];</div><div class="line">        </div><div class="line">         // 默认就是 false，即表达式支持函数调用，当表达式不需要函数调用是，调用该方法置为 true，可以调高运算效率</div><div class="line">         // [_evaluator withoutFunctionTransfer:false];</div><div class="line">    &#125;</div><div class="line">    return _evaluator;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="最后上图看看运行效果"><a href="#最后上图看看运行效果" class="headerlink" title="最后上图看看运行效果"></a>最后上图看看运行效果</h1><p><img src="http://upload-images.jianshu.io/upload_images/931410-8906ec964cf91fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1. 开始运行.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-83b7bd70bcd6a820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2. 选择函数.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-68665b6115bd610b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3. 选择指定测试用例.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-932d39cac3fa373f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4. 选择确定输入到了输入框.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-cf719fb086124172.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5. 表达式无误完成计算.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-2a8c3bcc21de0bdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6. 表达式有错误计算失败.png"></p>
<p><br><br>感兴趣请下载demo研究，运行后，点击快速测试，快速一睹 HMExpressionValuator 的风采吧！</p>
<p><a href="https://github.com/IOSLittleWhite/HMExpressionEvaluator" target="_blank" rel="external"> <strong>demo下载地址</strong></a></p>
<p>意见建议请联系：</p>
<p><strong>QQ: 247159603</strong></p>
<p><strong>简书：</strong> <a href="http://www.jianshu.com/u/9f166a0db301" target="_blank" rel="external"> <strong>JZ_Stone</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/IOSLittleWhite/HMExpressionEvaluator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;strong&gt;demo下载地址&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
  </entry>
  
</feed>
