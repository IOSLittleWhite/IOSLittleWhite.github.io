<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猿视界</title>
  <subtitle>不仅要明白是什么，更要清楚为什么。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-23T02:37:13.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>冯生伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS11适配之：0代码实现导航栏UIBarButtonItem间距调整</title>
    <link href="http://yoursite.com/2017/09/21/iOS11%E9%80%82%E9%85%8D%E4%B9%8B%EF%BC%9A0%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E6%A0%8FUIBarButtonItem%E9%97%B4%E8%B7%9D%E8%B0%83%E6%95%B4/"/>
    <id>http://yoursite.com/2017/09/21/iOS11适配之：0代码实现导航栏UIBarButtonItem间距调整/</id>
    <published>2017-09-21T12:48:18.000Z</published>
    <updated>2017-09-23T02:37:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>最新版Xcode9在20号已经提供下载了，Stone哥哥作为一个凡事喜欢走在前面的人（不要脸了，哈哈哈，不过Stone哥哥的手机系统确实是从iOS 11第一个beta版开始使用的，体验过各种bug煎熬，终于熬到正式版了，内牛满面…），当然第一时间就升级了，下载安装完5个多鸡的安装包，Stone哥哥激动的打开了目前正在开发的项目，Command+B，成功编译！但是当我点击运行，在APP中跳转几个页面后，忽然注意到导航栏…WTF!!!</p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-e49e895acf75a87e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WTF.png"></p>
<p>这间距可就大得有点惊人哈，顿时把Stone哥哥脸都吓白了…</p>
<p>于是Stone哥哥赶紧把原来用于调整间距的BarButton的负宽度一口气调到-50，[UIBarButtonItem zg_fixedSpaceWithWidth:-50];</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (UIBarButtonItem *)zg_fixedSpaceWithWidth:(CGFloat)width &#123;</div><div class="line">    UIBarButtonItem *spaceBarButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace</div><div class="line">                                                                                    target:nil</div><div class="line">                                                                                    action:nil];</div><div class="line">    spaceBarButton.width = width;</div><div class="line">    return spaceBarButton;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然鹅…这 <strong>并没什么卵用！并没什么卵用！并没什么卵用！</strong> <br><br>有点意思，就喜欢可以折腾一番的问题，所以我们还是和以往一样，从发现问题开始，冷静滴一步一步来把问题攻破。</p>
<h3 id="一-找出布局错乱的原因"><a href="#一-找出布局错乱的原因" class="headerlink" title="一. 找出布局错乱的原因"></a>一. 找出布局错乱的原因</h3><p>既然老一套调整间距的方式已经不起作用，那要么iOS 11增加了一种新的用于调整间距的UIBarButtonItem类型，要么就是整个解析发生变更，图层有变化，看图层是否有变化这个最直观又方便，所以我们先对图层来一探究竟<br><img src="http://upload-images.jianshu.io/upload_images/931410-5bfeb3f93d2c3feb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="
![Uploading iOS 11以前的版本NavBar布局_439945.png . . .]"><br>这是最新的iOS 11导航栏的视图层级结构，好复杂的样子，一个小小的item，叠了这么多层级，而且使用了autoLayout来布局，虽然图层很多，但看起来也很合理的样子，而且基本上就可以确定对item间距的调整方向——<strong>更改layout约束条件</strong>。忘了iOS 11以前是什么样子了，但感觉有变化，所以我们再来看看iOS 11以前的视图层级结构</p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-3db8edba370ee17a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS 11以前系统导航栏视图层级结构.png"><br>还真是不一样，很显然，iOS 11以前系统导航栏的层级结构好简单很多，而且没有使用autoLayout。所有的视图都堆在UINavigationBar上，对比起来，老版本确实不是很合理的样子，心里默默为这个细小的优化点个赞！<br>新版本的调整方向已经确定了，那能不能让老版本也统一呢，也给UINavigationButton也加上约束条件，抛弃fixedSpace类型的UIBarButtonItem。然鹅，这种操作是被禁止的，程序会无情的crash<br><img src="http://upload-images.jianshu.io/upload_images/931410-a351d4216e34d66a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不能给NavigationBar添加约束.png"></p>
<p>苹果不允许开发者给UINavigationBar添加约束…</p>
<p>唉！没事，坚强的Stone哥并没有哭，那就分开两种不同的适配方式吧，那我没再来对iOS 11以前的老版本的渲染规则好好了解一番，从前面图“iOS 11以前系统导航栏视图层级结构.png”和Stone哥的一番测试，得出了一下一些结论：</p>
<ul>
<li>系统自己创建的UINavigationButton内含的图片和标题水平和垂直方向都是居中对齐；</li>
<li>UINavigationButton高度上没有撑满整个UINavigationBar的高度，并且没有居中对齐，途中右边的两个item就很明显没在垂直方向对齐；</li>
<li>另外经过一点点微调，UINavigationButton左右两边与屏幕边缘的距离都是15，右边的两个item间距大概为5，固定不可整；</li>
</ul>
<p>看到这里，你可能跟我一样想吐槽了，原来iOS 11以前的系统导航栏渲染是这么随意，这里辣鸡…哈哈哈，所以Stone哥得好好的拯救他一下。</p>
<p>现在问题的根源了解得差不多了，也基本有了解决思路，所以是时候进入解决问题的第二步了。</p>
<h3 id="二-解题思路"><a href="#二-解题思路" class="headerlink" title="二. 解题思路"></a>二. 解题思路</h3><h4 id="1-针对老版本："><a href="#1-针对老版本：" class="headerlink" title="1. 针对老版本："></a>1. 针对老版本：</h4><p>看到老版本中，系统从UIBarButtonItem到添加到UINavigationBar上的UINavigationButton的转化如此糟糕，而且想要再对其进行修改极其困难，决定要阻断这一层转换，全都创建自己的CustomView，并对其进行对其设置，即添加到左边则左对齐，右边则右对其，并且高度撑满整个导航栏，总之就是这个customView要弥补前面提到的老版本的所有不足。</p>
<h4 id="2-针对新版本："><a href="#2-针对新版本：" class="headerlink" title="2. 针对新版本："></a>2. 针对新版本：</h4><p>前面已经提到，新版本通过改变约束来实现调整，但是具体在什么时候，在哪个地方来调整呢，首先我想到在[UINavigationBar layoutSubviews] 方法里遍历subViews来设置约束，但是subViews里最终遍历到UIStackView的时候，并没有position信息，即不知道这个视图是被添加在了左边还是右边，所以很显然也会需要CustomView，并在其中包含位置信息，既然这样，何不将改变约束的方法放在CustomView的layoutSubviews里呢，减少对一个系统类的修改应该是降低风险降低复杂度的操作吧，哈哈，要在CustomView里设置约束的话，那CustomView还需要包含另外一条信息，就是与它相邻的另外一个CustomView，因为要设置两两之间的间距。</p>
<ul>
<li>到这里，我们的主角CustomView类就有了两个必须的属性了，一个描述被添加的位置(左或右)的position，一个指向前一个相邻CustomView的属性prevCustomView；</li>
<li>另外要阻断系统对UIBarButtonItem的转换，CustomView还应该增加几个和UIBarButtonItem对应的实例化方法，最终得到了CustomView类的声明如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">typedef NS_ENUM(NSInteger, ZGBarButtonItemPosition) &#123;</div><div class="line">    ZGBarButtonItemPositionLeft,</div><div class="line">    ZGBarButtonItemPositionRight</div><div class="line">&#125;;</div><div class="line"></div><div class="line">typedef NS_ENUM(NSInteger, ZGBarButtonItemType) &#123;</div><div class="line">    ZGBarButtonItemTypeTitle,</div><div class="line">    ZGBarButtonItemTypeImage,</div><div class="line">    ZGBarButtonItemTypeCustomView</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface ZGBarButtonItemCustomView : UIView</div><div class="line"></div><div class="line">@property (nonatomic, assign) ZGBarButtonItemPosition position;</div><div class="line">@property (nonatomic, weak) ZGBarButtonItemCustomView *prevCustomView;</div><div class="line">@property (nonatomic, assign) ZGBarButtonItemType itemType;</div><div class="line"></div><div class="line">- (instancetype)initWithTitle:(NSString *)title target:(id)target action:(SEL)action;</div><div class="line">- (instancetype)initWithImage:(UIImage *)image target:(id)target action:(SEL)action;</div><div class="line">- (instancetype)initWithCustomView:(UIView *)customView;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<ul>
<li>针对老版本，CustomView 设置对其方式，自适应大小；</li>
<li>针对新版本，CustomView要设置约束；</li>
<li>因为需要添加响应，所以CustomView上应该添加一个button；</li>
<li>另外由于CustomView上的button的图片和文字正常情况下无法随UINavigationBar的tintColor改变，所以还得设置跟随tintColor，图片好说，本身的renderMode渲染模式就支持跟随tintColor改变，但是titleLabel不能，所以还要设置KVO监听UINavigationBar.tintColor的改变，随时更改titleLabel.textColor。<br>所以得到CustomView的实现代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div></pre></td><td class="code"><pre><div class="line">#import &quot;ZGBarButtonItemCustomView.h&quot;</div><div class="line">#import &quot;UIView+ZGLayoutConstraint.h&quot;</div><div class="line">#import &quot;ZGNavBarItemSpceMacro.h&quot;</div><div class="line"></div><div class="line">@interface ZGBarButtonItemCustomView ()</div><div class="line"></div><div class="line">@property (nonatomic, strong) UIButton *button;</div><div class="line">@property (nonatomic, assign) BOOL fixed;</div><div class="line">@property (nonatomic, assign) BOOL isLastItem;</div><div class="line">@property (nonatomic, weak) UINavigationBar *navBar;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ZGBarButtonItemCustomView</div><div class="line"></div><div class="line">- (instancetype)initWithTitle:(NSString *)title target:(id)target action:(SEL)action &#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        [self p_setUpButtonWithTitle:title</div><div class="line">                               image:nil</div><div class="line">                              target:target</div><div class="line">                              action:action];</div><div class="line">        [self p_init];</div><div class="line">        self.itemType = ZGBarButtonItemTypeTitle;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithImage:(UIImage *)image target:(id)target action:(SEL)action &#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        [self p_setUpButtonWithTitle:nil</div><div class="line">                               image:image</div><div class="line">                              target:target</div><div class="line">                              action:action];</div><div class="line">        [self p_init];</div><div class="line">        self.itemType = ZGBarButtonItemTypeImage;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithCustomView:(UIView *)customView &#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        [self addSubview:customView];</div><div class="line">        [self setFrame:customView.bounds];</div><div class="line">        [self setCenter:customView.center];</div><div class="line">        </div><div class="line">        [self p_init];</div><div class="line">        self.itemType = ZGBarButtonItemTypeCustomView;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)dealloc &#123;</div><div class="line">    [self.navBar removeObserver:self forKeyPath:@&quot;tintColor&quot;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)layoutSubviews &#123;</div><div class="line">    [super layoutSubviews];</div><div class="line">    </div><div class="line">    if ([[UIDevice currentDevice] systemVersion].floatValue &lt; 11) &#123;</div><div class="line">        [self p_setTitleFollowNavBarTintColorFromView:self];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (self.fixed) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    UIView *adaptorView = [self p_getAdaptorViewFromView:self];</div><div class="line">    UIView *prevAdaptorView = [self p_getAdaptorViewFromView:self.prevCustomView];</div><div class="line">    [adaptorView zg_addSizeConstraintWithSize:self.frame.size];</div><div class="line">    [adaptorView zg_addCenterYConstraint];</div><div class="line">    CGFloat screenBorderGap = ZG_BAR_ITEM_SCREEN_BORDER_GAP;</div><div class="line">    </div><div class="line">    if (self.position == ZGBarButtonItemPositionLeft) &#123;</div><div class="line">        if (!prevAdaptorView) &#123;</div><div class="line">            [adaptorView zg_addLeftBorderGap:0];</div><div class="line">        &#125; else &#123;</div><div class="line">            [prevAdaptorView zg_addHorizontalGap:ZG_BAR_ITEM_GAP toView:adaptorView];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        if (self.isLastItem) &#123;</div><div class="line">            UIStackView *stackView = [self p_getStackViewFromView:adaptorView];</div><div class="line">            for (NSLayoutConstraint *constraint in stackView.superview.constraints) &#123;</div><div class="line">                if ([constraint.firstItem isKindOfClass:[UILayoutGuide class]] &amp;&amp;</div><div class="line">                    constraint.firstAttribute == NSLayoutAttributeLeading) &#123;</div><div class="line">                    [stackView.superview removeConstraint:constraint];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if (self.itemType == ZGBarButtonItemTypeImage) &#123;</div><div class="line">                screenBorderGap -= ZG_BAR_ITEM_LEFT_ICON_EDGE_INSETS;</div><div class="line">            &#125;</div><div class="line">            [stackView zg_addLeftBorderGap:screenBorderGap];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125; else if (self.position == ZGBarButtonItemPositionRight) &#123;</div><div class="line">        if (!prevAdaptorView) &#123;</div><div class="line">            [adaptorView zg_addRightBorderGap:0];</div><div class="line">        &#125; else &#123;</div><div class="line">            [adaptorView zg_addHorizontalGap:-ZG_BAR_ITEM_GAP toView:prevAdaptorView];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        if (self.isLastItem) &#123;</div><div class="line">            UIStackView *stackView = [self p_getStackViewFromView:adaptorView];</div><div class="line">            for (NSLayoutConstraint *constraint in stackView.superview.constraints) &#123;</div><div class="line">                if ([constraint.firstItem isKindOfClass:[UILayoutGuide class]] &amp;&amp;</div><div class="line">                    constraint.firstAttribute == NSLayoutAttributeTrailing) &#123;</div><div class="line">                    [stackView.superview removeConstraint:constraint];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if (self.itemType == ZGBarButtonItemTypeImage) &#123;</div><div class="line">                screenBorderGap -= ZG_BAR_ITEM_RIGHT_ICON_EDGE_INSETS;</div><div class="line">            &#125;</div><div class="line">            [stackView zg_addRightBorderGap:-screenBorderGap];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [self p_setTitleFollowNavBarTintColorFromView:adaptorView];</div><div class="line">    self.fixed = YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - KVO</div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</div><div class="line">    [self.button setTitleColor:self.navBar.tintColor forState:UIControlStateNormal];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - private</div><div class="line">- (void)p_init &#123;</div><div class="line">    self.isLastItem = YES;</div><div class="line">    self.fixed = NO;</div><div class="line">    self.position = ZGBarButtonItemPositionLeft;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)p_setUpButtonWithTitle:(NSString *)title image:(UIImage *)image target:(id)target action:(SEL)action &#123;</div><div class="line">    [self setButton:[[UIButton alloc] init]];</div><div class="line">    [self addSubview:self.button];</div><div class="line">    [self.button setTitle:title forState:UIControlStateNormal];</div><div class="line">    [self.button.titleLabel setFont:ZG_BAR_ITEM_FONT];</div><div class="line">    if (image.renderingMode == UIImageRenderingModeAutomatic) &#123;</div><div class="line">        image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];</div><div class="line">    &#125;</div><div class="line">    [self.button setImage:image forState:UIControlStateNormal];</div><div class="line">    [self.button sizeToFit];</div><div class="line">    [self.button setFrame:CGRectMake(0, 0, MAX(self.button.frame.size.width, ZG_BAR_ITEM_MIN_WIDTH), 44)];</div><div class="line">    [self.button addTarget:target action:action forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    [self setFrame:self.button.bounds];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIView *)p_getAdaptorViewFromView:(UIView *)view &#123;</div><div class="line">    if (!view) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    UIView *tempView = view;</div><div class="line">    while (![tempView isKindOfClass:NSClassFromString(@&quot;_UITAMICAdaptorView&quot;)] &amp;&amp; tempView.superview) &#123;</div><div class="line">        tempView = tempView.superview;</div><div class="line">    &#125;</div><div class="line">    return tempView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIStackView *)p_getStackViewFromView:(UIView *)view &#123;</div><div class="line">    if (!view) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    UIView *tempView = view;</div><div class="line">    while (![tempView isKindOfClass:UIStackView.class] &amp;&amp; tempView.superview) &#123;</div><div class="line">        tempView = tempView.superview;</div><div class="line">    &#125;</div><div class="line">    return (UIStackView *)tempView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UINavigationBar *)p_getNavBarViewFromView:(UIView *)view &#123;</div><div class="line">    if (!view) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    UIView *tempView = view;</div><div class="line">    while (![tempView isKindOfClass:UINavigationBar.class] &amp;&amp; tempView.superview) &#123;</div><div class="line">        tempView = tempView.superview;</div><div class="line">    &#125;</div><div class="line">    return (UINavigationBar *)tempView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)p_setTitleFollowNavBarTintColorFromView:(UIView *)view &#123;</div><div class="line">    if (self.itemType == ZGBarButtonItemTypeTitle) &#123;</div><div class="line">        self.navBar = [self p_getNavBarViewFromView:view];</div><div class="line">        [self.button setTitleColor:self.navBar.tintColor forState:UIControlStateNormal];</div><div class="line">        </div><div class="line">        [self.navBar addObserver:self</div><div class="line">                      forKeyPath:@&quot;tintColor&quot;</div><div class="line">                         options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld</div><div class="line">                         context:nil];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - setter &amp; getter</div><div class="line">- (void)setPosition:(ZGBarButtonItemPosition)position &#123;</div><div class="line">    _position = position;</div><div class="line">    </div><div class="line">    if (self.position == ZGBarButtonItemPositionLeft) &#123;</div><div class="line">        [self.button setContentHorizontalAlignment:UIControlContentHorizontalAlignmentLeft];</div><div class="line">    &#125; else &#123;</div><div class="line">        [self.button setContentHorizontalAlignment:UIControlContentHorizontalAlignmentRight];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setPrevCustomView:(ZGBarButtonItemCustomView *)prevCustomView &#123;</div><div class="line">    _prevCustomView = prevCustomView;</div><div class="line">    self.prevCustomView.isLastItem = NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后一步就是选择在合适的创建CustomView，和给CustomView设置其他属性了，这个很显然要分别给UIBarButtonItem和UINavigationItem写扩展，切面替换相关方法了，直接上代码：</p>
<p><strong>UIBarButtonItem+ZGFixSpace.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">#import &quot;ZGBarButtonItemCustomView.h&quot;</div><div class="line"></div><div class="line">@interface UIBarButtonItem (ZGFixSpace)</div><div class="line"></div><div class="line">/*</div><div class="line"> *  used before iOS 11</div><div class="line"> */</div><div class="line">+ (UIBarButtonItem *)zg_fixedSpaceWithWidth:(CGFloat)width;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  the side the item be added in (left or right)</div><div class="line"> *  used after iOS 11</div><div class="line"> */</div><div class="line">- (void)zg_setPosition:(ZGBarButtonItemPosition)position;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  is the first itme at the current side</div><div class="line"> *  used after iOS 11</div><div class="line"> */</div><div class="line">- (void)zg_setPrevCustomView:(ZGBarButtonItemCustomView *)prevCustomView;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>UIBarButtonItem+ZGFixSpace.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#import &quot;UIBarButtonItem+ZGFixSpace.h&quot;</div><div class="line">#import &quot;NSObject+ZGRuntime.h&quot;</div><div class="line"></div><div class="line">@implementation UIBarButtonItem (ZGFixSpace)</div><div class="line"></div><div class="line">+ (UIBarButtonItem *)zg_fixedSpaceWithWidth:(CGFloat)width &#123;</div><div class="line">    UIBarButtonItem *spaceBarButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace</div><div class="line">                                                                                    target:nil</div><div class="line">                                                                                    action:nil];</div><div class="line">    spaceBarButton.width = width;</div><div class="line">    return spaceBarButton;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)load &#123;</div><div class="line">    [self zg_swizzleInstanceMethodWithOriginSel:@selector(initWithTitle:style:target:action:)</div><div class="line">                                    swizzledSel:@selector(zg_initWithTitle:style:target:action:)];</div><div class="line">    </div><div class="line">    [self zg_swizzleInstanceMethodWithOriginSel:@selector(initWithImage:style:target:action:)</div><div class="line">                                    swizzledSel:@selector(zg_initWithImage:style:target:action:)];</div><div class="line">    </div><div class="line">    [self zg_swizzleInstanceMethodWithOriginSel:@selector(initWithCustomView:)</div><div class="line">                                    swizzledSel:@selector(zg_initWithCustomView:)];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_setPosition:(ZGBarButtonItemPosition)position &#123;</div><div class="line">    ZGBarButtonItemCustomView *zgCustomView = (ZGBarButtonItemCustomView *)self.customView;</div><div class="line">    zgCustomView.position = position;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_setPrevCustomView:(ZGBarButtonItemCustomView *)prevCustomView &#123;</div><div class="line">    ZGBarButtonItemCustomView *zgCustomView = (ZGBarButtonItemCustomView *)self.customView;</div><div class="line">    zgCustomView.prevCustomView = prevCustomView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)zg_initWithTitle:(NSString *)title style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action &#123;</div><div class="line">    ZGBarButtonItemCustomView *zgCustomView = [[ZGBarButtonItemCustomView alloc] initWithTitle:title</div><div class="line">                                                                                        target:target</div><div class="line">                                                                                        action:action];</div><div class="line">    return [self zg_initWithCustomView:zgCustomView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)zg_initWithImage:(UIImage *)image style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action &#123;</div><div class="line">    ZGBarButtonItemCustomView *zgCustomView = [[ZGBarButtonItemCustomView alloc] initWithImage:image</div><div class="line">                                                                                        target:target</div><div class="line">                                                                                        action:action];</div><div class="line">    return [self zg_initWithCustomView:zgCustomView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)zg_initWithCustomView:(UIView *)customView &#123;</div><div class="line">    ZGBarButtonItemCustomView *zgCustomView = [[ZGBarButtonItemCustomView alloc] initWithCustomView:customView];</div><div class="line">    return [self zg_initWithCustomView:zgCustomView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>这个扩展主要任务是实现前面说的，阻断系统从UIBarButtonItem到UINavigationButton的转换，实现手段为替换掉<br>UIBarButtonItem的三个实例化方法，在这三个方法中均创建一个CustomView，然后调用原生的initWithCustomView:方法，最终将这个CustomView渲染到UINavigationBar上，这样不会再有UINavigationButton的存在了。</p>
<hr>
<p>接下来是 <strong>UINavigationItem+ZGFixSpace</strong> <br><br>这个扩展是替换掉在UIViewController中，给viewController.navigationItem添加item的四个方法，给每个item.customView完善前面讲到的position和prevCustomView两个属性，并针对iOS 11以前的版本，在item前添加一个用于调整与屏幕边缘间距的弹簧item，最终就能实现各个版本一样的自适应调整间距的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">#import &quot;UINavigationItem+ZGFixSpace.h&quot;</div><div class="line">#import &quot;NSObject+ZGRuntime.h&quot;</div><div class="line">#import &quot;UIBarButtonItem+ZGFixSpace.h&quot;</div><div class="line">#import &quot;ZGNavBarItemSpceMacro.h&quot;</div><div class="line"></div><div class="line">@implementation UINavigationItem (ZGFixSpace)</div><div class="line"></div><div class="line">+ (void)load &#123;</div><div class="line">    [self zg_swizzleInstanceMethodWithOriginSel:@selector(setLeftBarButtonItem:)</div><div class="line">                                    swizzledSel:@selector(zg_setLeftBarButtonItem:)];</div><div class="line">    [self zg_swizzleInstanceMethodWithOriginSel:@selector(setLeftBarButtonItems:)</div><div class="line">                                    swizzledSel:@selector(zg_setLeftBarButtonItems:)];</div><div class="line"></div><div class="line">    [self zg_swizzleInstanceMethodWithOriginSel:@selector(setRightBarButtonItem:)</div><div class="line">                                    swizzledSel:@selector(zg_setRightBarButtonItem:)];</div><div class="line">    [self zg_swizzleInstanceMethodWithOriginSel:@selector(setRightBarButtonItems:)</div><div class="line">                                    swizzledSel:@selector(zg_setRightBarButtonItems:)];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_setLeftBarButtonItem:(UIBarButtonItem *)leftBarButtonItem &#123;</div><div class="line">    if (!leftBarButtonItem || [leftBarButtonItem isKindOfClass:[NSNull class]]) &#123;</div><div class="line">        [self zg_setLeftBarButtonItem:nil];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 11) &#123;</div><div class="line">        [leftBarButtonItem zg_setPosition:ZGBarButtonItemPositionLeft];</div><div class="line">        [self zg_setLeftBarButtonItem:leftBarButtonItem];</div><div class="line">    &#125; else &#123;</div><div class="line">        [self setLeftBarButtonItems:@[leftBarButtonItem]];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_setLeftBarButtonItems:(NSArray *)leftBarButtonItems &#123;</div><div class="line">    if (!leftBarButtonItems || [leftBarButtonItems isKindOfClass:[NSNull class]] || leftBarButtonItems.count == 0) &#123;</div><div class="line">        [self zg_setLeftBarButtonItems:nil];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSMutableArray *items = [NSMutableArray array];</div><div class="line">    if ([[[UIDevice currentDevice] systemVersion] floatValue] &lt; 11) &#123;</div><div class="line">        ZGBarButtonItemCustomView *customView = (ZGBarButtonItemCustomView *)((UIBarButtonItem *)[leftBarButtonItems firstObject]).customView;</div><div class="line">        CGFloat gap = ZG_BAR_ITEM_SCREEN_BORDER_GAP;</div><div class="line">        if (customView.itemType == ZGBarButtonItemTypeImage) &#123;</div><div class="line">            gap -= ZG_BAR_ITEM_LEFT_ICON_EDGE_INSETS;</div><div class="line">        &#125;</div><div class="line">        [items addObject:[UIBarButtonItem zg_fixedSpaceWithWidth:-(15 - gap)]];</div><div class="line">    &#125;</div><div class="line">    ZGBarButtonItemCustomView *prevCustomeView = nil;</div><div class="line">    for (NSInteger i=0; i&lt;leftBarButtonItems.count; i++) &#123;</div><div class="line">        UIBarButtonItem *item = [leftBarButtonItems objectAtIndex:i];</div><div class="line">        [item zg_setPosition:ZGBarButtonItemPositionLeft];</div><div class="line">        [items addObject:item];</div><div class="line">        [item zg_setPrevCustomView:prevCustomeView];</div><div class="line">        prevCustomeView = (ZGBarButtonItemCustomView *)item.customView;</div><div class="line">    &#125;</div><div class="line">    [self zg_setLeftBarButtonItems:items];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_setRightBarButtonItem:(UIBarButtonItem *)rightBarButtonItem &#123;</div><div class="line">    if (!rightBarButtonItem || [rightBarButtonItem isKindOfClass:[NSNull class]]) &#123;</div><div class="line">        [self zg_setRightBarButtonItem:nil];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 11) &#123;</div><div class="line">        [rightBarButtonItem zg_setPosition:ZGBarButtonItemPositionRight];</div><div class="line">        [self zg_setRightBarButtonItem:rightBarButtonItem];</div><div class="line">    &#125; else &#123;</div><div class="line">        [self setRightBarButtonItems:@[rightBarButtonItem]];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_setRightBarButtonItems:(NSArray *)rightBarButtonItems &#123;</div><div class="line">    if (!rightBarButtonItems || [rightBarButtonItems isKindOfClass:[NSNull class]] || rightBarButtonItems.count == 0) &#123;</div><div class="line">        [self zg_setRightBarButtonItems:nil];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSMutableArray *items = [NSMutableArray array];</div><div class="line">    if ([[[UIDevice currentDevice] systemVersion] floatValue] &lt; 11) &#123;</div><div class="line">        ZGBarButtonItemCustomView *customView = (ZGBarButtonItemCustomView *)((UIBarButtonItem *)[rightBarButtonItems firstObject]).customView;</div><div class="line">        CGFloat gap = ZG_BAR_ITEM_SCREEN_BORDER_GAP;</div><div class="line">        if (customView.itemType == ZGBarButtonItemTypeImage) &#123;</div><div class="line">            gap -= ZG_BAR_ITEM_RIGHT_ICON_EDGE_INSETS;</div><div class="line">        &#125;</div><div class="line">        [items addObject:[UIBarButtonItem zg_fixedSpaceWithWidth:-(15 - gap)]];</div><div class="line">    &#125;</div><div class="line">    ZGBarButtonItemCustomView *prevCustomeView = nil;</div><div class="line">    for (NSInteger i=0; i&lt;rightBarButtonItems.count; i++) &#123;</div><div class="line">        UIBarButtonItem *item = [rightBarButtonItems objectAtIndex:i];</div><div class="line">        [item zg_setPosition:ZGBarButtonItemPositionRight];</div><div class="line">        [item zg_setPrevCustomView:prevCustomeView];</div><div class="line">        prevCustomeView = (ZGBarButtonItemCustomView *)item.customView;</div><div class="line">        [items addObject:item];</div><div class="line">    &#125;</div><div class="line">    [self zg_setRightBarButtonItems:items];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<hr>
<p>另外还有两个工具类扩展<br><br>第一个 <strong>NSObject+ZGRuntime</strong>，主要是给实例对象添加了一个交换实例方法的API，前面的两个扩展都是在+ (void)load 方法里调用这个方法来替换掉原生API。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)zg_swizzleInstanceMethodWithOriginSel:(SEL)originSel swizzledSel:(SEL)swizzledSel &#123;</div><div class="line">    Method m1 = class_getInstanceMethod([self class], originSel);</div><div class="line">    Method m2 = class_getInstanceMethod([self class], swizzledSel);</div><div class="line">    method_exchangeImplementations(m1, m2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>第二个 <strong>UIView+ZGLayoutConstraint</strong>，这个扩展主要是提供了给View添加 尺寸(size)，Y坐标中心点(centerY)，与另一个view的水平间距(horizontalGap)，与父视图边缘间距等的约束的API，在CustomView类的layoutSubviews方法里，iOS 11以后的导航栏就是调用这些方法来添加约束。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">#import &quot;UIView+ZGLayoutConstraint.h&quot;</div><div class="line"></div><div class="line">@implementation UIView (ZGLayoutConstraint)</div><div class="line"></div><div class="line">- (void)zg_addSizeConstraintWithSize:(CGSize)size &#123;</div><div class="line">    [self addConstraint:[NSLayoutConstraint constraintWithItem:self</div><div class="line">                                                     attribute:NSLayoutAttributeWidth</div><div class="line">                                                     relatedBy:NSLayoutRelationEqual</div><div class="line">                                                        toItem:nil</div><div class="line">                                                     attribute:NSLayoutAttributeNotAnAttribute</div><div class="line">                                                    multiplier:1.0</div><div class="line">                                                      constant:size.width]];</div><div class="line">    </div><div class="line">    [self addConstraint:[NSLayoutConstraint constraintWithItem:self</div><div class="line">                                                     attribute:NSLayoutAttributeHeight</div><div class="line">                                                     relatedBy:NSLayoutRelationEqual</div><div class="line">                                                        toItem:nil</div><div class="line">                                                     attribute:NSLayoutAttributeNotAnAttribute</div><div class="line">                                                    multiplier:1.0</div><div class="line">                                                      constant:size.height]];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_addCenterYConstraint &#123;</div><div class="line">    [self.superview addConstraint:[NSLayoutConstraint constraintWithItem:self</div><div class="line">                                                               attribute:NSLayoutAttributeCenterY</div><div class="line">                                                               relatedBy:NSLayoutRelationEqual</div><div class="line">                                                                  toItem:self.superview</div><div class="line">                                                               attribute:NSLayoutAttributeCenterY</div><div class="line">                                                              multiplier:1.0</div><div class="line">                                                                constant:0]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_addHorizontalGap:(CGFloat)gap toView:(UIView *)view &#123;</div><div class="line">    [self.superview addConstraint:[NSLayoutConstraint constraintWithItem:self</div><div class="line">                                                               attribute:NSLayoutAttributeRight</div><div class="line">                                                               relatedBy:NSLayoutRelationEqual</div><div class="line">                                                                  toItem:view</div><div class="line">                                                               attribute:NSLayoutAttributeLeft</div><div class="line">                                                              multiplier:1.0</div><div class="line">                                                                constant:gap]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_addLeftBorderGap:(CGFloat)gap &#123;</div><div class="line">    [self.superview addConstraint:[NSLayoutConstraint constraintWithItem:self</div><div class="line">                                                               attribute:NSLayoutAttributeLeading</div><div class="line">                                                               relatedBy:NSLayoutRelationEqual</div><div class="line">                                                                  toItem:self.superview</div><div class="line">                                                               attribute:NSLayoutAttributeLeading</div><div class="line">                                                              multiplier:1.0</div><div class="line">                                                                constant:gap]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)zg_addRightBorderGap:(CGFloat)gap &#123;</div><div class="line">    [self.superview addConstraint:[NSLayoutConstraint constraintWithItem:self</div><div class="line">                                                               attribute:NSLayoutAttributeTrailing</div><div class="line">                                                               relatedBy:NSLayoutRelationEqual</div><div class="line">                                                                  toItem:self.superview</div><div class="line">                                                               attribute:NSLayoutAttributeTrailing</div><div class="line">                                                              multiplier:1.0</div><div class="line">                                                                constant:gap]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<hr>
<p>最后，也是最重要的，是便于开发者设置间距的宏文件 <strong>ZGNavBarItemSpceMacro</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#ifndef ZGNavBarItemSpceMacro_h</div><div class="line">#define ZGNavBarItemSpceMacro_h</div><div class="line"></div><div class="line">#define ZG_BAR_ITEM_SCREEN_BORDER_GAP           10  // item到屏幕边缘的距离</div><div class="line">#define ZG_BAR_ITEM_GAP                         5   // item之间的距离 ios11以后生效</div><div class="line">#define ZG_BAR_ITEM_LEFT_ICON_EDGE_INSETS       6   // 左边item图标图片内边距</div><div class="line">#define ZG_BAR_ITEM_RIGHT_ICON_EDGE_INSETS      2   // 右边item图标图片内边距</div><div class="line">#define ZG_BAR_ITEM_MIN_WIDTH                   44  // item的最小宽度</div><div class="line">#define ZG_BAR_ITEM_FONT                        [UIFont systemFontOfSize:15 weight:UIFontWeightLight] // item字体 ios11以后生效</div><div class="line"></div><div class="line"></div><div class="line">#endif /* ZGNavBarItemSpceMacro_h */</div></pre></td></tr></table></figure>
<hr>
<p>好啦，全部干活已出，感谢阅读，欢迎去GitHub下载并点星星，爱你哟！！！</p>
<p><a href="https://github.com/IOSLittleWhite/ZGNavigationBarItemFixSpace" target="_blank" rel="external"> <strong>下载源码</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最新版Xcode9在20号已经提供下载了，Stone哥哥作为一个凡事喜欢走在前面的人（不要脸了，哈哈哈，不过Stone哥哥的手机系统确实是从iOS 11第一个beta版开始使用的，体验过各种bug煎熬，终于熬到正式版了，内牛满面…），当然第一时间就升级了，下载安装完5个多鸡
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决给xib中的button设置倒计时title闪烁的问题</title>
    <link href="http://yoursite.com/2017/07/04/%E8%A7%A3%E5%86%B3%E7%BB%99xib%E4%B8%AD%E7%9A%84button%E8%AE%BE%E7%BD%AE%E5%80%92%E8%AE%A1%E6%97%B6title%E9%97%AA%E7%83%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/07/04/解决给xib中的button设置倒计时title闪烁的问题/</id>
    <published>2017-07-04T15:32:17.000Z</published>
    <updated>2017-07-04T15:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前一直是纯代码编写开发APP，最近开始在项目里使用xib和storyboard，摸索了一整天，终于算基本掌握，但临近下班时，发现了一个很奇葩的问题…</p>
<h3 id="问题场景是这样的"><a href="#问题场景是这样的" class="headerlink" title="问题场景是这样的:"></a>问题场景是这样的:</h3><blockquote>
<p>用户修改绑定手机号时，需要获取验证码，然后按钮显示60秒倒计时，在此期间按钮点击失效，并每隔一秒通过setTile:forState方法更新按钮标题，显示倒计时。</p>
</blockquote>
<p>最初的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString *title = [NSString stringWithFormat:@&quot;%ld秒后重试&quot;, self.count];</div><div class="line">[self.getCheckCodeButton setTitle:title forState:UIControlStateDisabled];</div></pre></td></tr></table></figure>
<p>这应该是一个大家非常熟悉的一个常规需求，在以前使用纯代码编写时，不会有任何问题，然而今天的奇葩显现是，每次调用setTitle更新按钮标题时，都会消失一下再显示，看起来就是每个一秒的闪烁显示，特别酷炫（哈哈哈！），然而这<strong>并不是此刻我们需要的效果…</strong></p>
<h2 id="怎么办呢？"><a href="#怎么办呢？" class="headerlink" title="怎么办呢？"></a>怎么办呢？</h2><p>悄悄地去度娘一搜，还真有不少小伙伴也碰到了同样的问题，先来说说网上搜到的方法：</p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在storyboard找到这个不老实的button，将他的type设置为Custom，默认是System。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-b851b9263a49c7ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="默认值System.png"></p>
<p>修改之后如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-18aca979a2c4d471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="改成Custom.png"></p>
<p>很不幸的是，这种最简单的操作方式，在我这里 <strong>并没有奏效</strong> …  <strong>并没有奏效</strong> … <strong>并没有奏效</strong> <strong>!!!!!!</strong><br>幸好网络资源棒棒哒，很快我又找到了另一种方法。</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>这个方法虽然奏效，但我觉得很奇葩，很扯蛋，哈哈，可能奇葩的问题需要奇葩的方法，想出这个方法的同学其实还是很腻害的，<strong>膜拜！哈哈！！！</strong><br>下面来看这位同学的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *title = [NSString stringWithFormat:@&quot;%ld秒后重试&quot;, self.count];</div><div class="line">self.getCheckCodeButton.titleLabel.text = title; // 这一句很重要，是关键，而且必须在setTitle之前，别问我为什么，我不知道，捂脸 捂脸 捂脸</div><div class="line">[self.getCheckCodeButton setTitle:title forState:UIControlStateDisabled];</div></pre></td></tr></table></figure>
<p>如注释所示，就是在setTitle之前，直接通过titleLabel给按钮标题赋值，然后再setTitle，这两行代买一个字都不能少，而且不需是这个顺序，setTitle断后。</p>
<blockquote>
<p>这个方法虽然能解决问题，但对于有代码洁癖的人，怎么能接受这么奇葩的使用方式？？？<br>于是通过高人指点，最终的完美解决方案诞生了…看方法三</p>
</blockquote>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>先来看优雅的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *title = [NSString stringWithFormat:@&quot;%ld秒后重试&quot;, self.count];</div><div class="line">[UIView performWithoutAnimation:^&#123;</div><div class="line">        [self.getCheckCodeButton setTitle:title forState:UIControlStateDisabled];</div><div class="line">        [self.getCheckCodeButton layoutIfNeeded];</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>现在我们先来谈谈出现闪烁问题的根本原因，通过xib创建的button，在setTitle的时候，默认添加了一个隐式的fade动画，使得title的更新是一个渐变的过程，而这个动画时间慢到了我们肉眼完全可以的感知的速度，于是出现了我们看到的闪烁，所以解决问题的关键，当然就是去禁用这个该死的动画了，而UIView的API里就已经提供了我们禁用隐式动画的block方法了，到此，问题完美解决！！！！</p>
<p>多些高人指点，觉得有记录和分享价值，睡前坚持把字码起来，希望小伙伴们喜欢！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前一直是纯代码编写开发APP，最近开始在项目里使用xib和storyboard，摸索了一整天，终于算基本掌握，但临近下班时，发现了一个很奇葩的问题…&lt;/p&gt;
&lt;h3 id=&quot;问题场景是这样的&quot;&gt;&lt;a href=&quot;#问题场景是这样的&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谈一谈我对属性，成员变量，实例变量，以及传说中的@property，@synthesize，@dynamic的认识</title>
    <link href="http://yoursite.com/2017/06/14/%E8%B0%88%E4%B8%80%E8%B0%88%E6%88%91%E5%AF%B9%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%EF%BC%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84-property%EF%BC%8C-synthesize%EF%BC%8C-dynamic%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2017/06/14/谈一谈我对属性，成员变量，实例变量，以及传说中的-property，-synthesize，-dynamic的认识/</id>
    <published>2017-06-14T09:11:18.000Z</published>
    <updated>2017-06-14T09:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-属性，成员变量，实例变量"><a href="#一-属性，成员变量，实例变量" class="headerlink" title="一. 属性，成员变量，实例变量"></a>一. 属性，成员变量，实例变量</h2><p>在讨论之前我先给大家推荐一个 <strong>NSObject</strong> 的类扩展 <strong>NSObject+DLIntrospection</strong> 利用 runtime，扩展了获取类的属性，实例变量，实例方法，类方法，协议protocol 等列表的方法，后面的讲解我们需要用到它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface NSObject (DLIntrospection)</div><div class="line"></div><div class="line">+ (NSArray *)classes; // 获取所有的类名</div><div class="line">+ (NSArray *)properties; // 获取属性列表</div><div class="line">+ (NSArray *)instanceVariables; // 获取实例变量列表</div><div class="line">+ (NSArray *)classMethods; // 获取类方法列表（+方法）</div><div class="line">+ (NSArray *)instanceMethods; // 获取实例方法列表（-方法）</div><div class="line">+ (NSArray *)protocols;  // 获取协议列表</div><div class="line">+ (NSDictionary *)descriptionForProtocol:(Protocol *)proto;</div><div class="line">+ (NSString *)parentClassHierarchy; // 当前类的继承关系</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>废话少说，先看代码<br>.h 源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@interface HMTestClass : NSObject</div><div class="line">&#123;</div><div class="line">    NSString *_ivarInterface; // 实例变量，在iOS开发中也叫成员变量</div><div class="line">&#125;</div><div class="line">@property (nonatomic, copy) NSString *propertyInterface;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>再看 .m 源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@interface HMTestClass ()</div><div class="line">@property (nonatomic, copy) NSString *propertyImplementation;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation HMTestClass</div><div class="line">&#123;</div><div class="line">    NSString *_ivarImplementation; // 实例变量，在iOS开发中也叫成员变量</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>最后咱们看看调试输出结果<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取属性输出结果</span></div><div class="line">(lldb) po [HMTestClass properties]</div><div class="line">&lt;__NSArrayI <span class="number">0x100200c40</span>&gt;(</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* propertyImplementation,</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* propertyInterface</div><div class="line">)</div></pre></td></tr></table></figure></p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取实例变量输出结果</span></div><div class="line">(lldb) po [HMTestClass instanceVariables]</div><div class="line">&lt;<span class="variable">__NSArrayI</span> <span class="number">0</span>x100300430&gt;(</div><div class="line">NSString* <span class="variable">_ivarInterface</span>,</div><div class="line">NSString* <span class="variable">_ivarImplementation</span>,</div><div class="line">NSString* <span class="variable">_propertyInterface</span>,</div><div class="line">NSString* <span class="variable">_propertyImplementation</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="看到这里，我们首先可以得出结论："><a href="#看到这里，我们首先可以得出结论：" class="headerlink" title="看到这里，我们首先可以得出结论："></a>看到这里，我们首先可以得出结论：</h3><ol>
<li><strong>属性</strong> 即用 <strong>@property</strong>  声明的部分，它可以在 .h 文件里，也可以在 .m 文件里，在 .m 里即为私有属性；</li>
<li>而 <strong>实例变量</strong> 即为被包含在 @interface 和 @implementation 下的大括号里的，以及 @property 时编译器为我们自动生成的两部分组成；</li>
</ol>
<blockquote>
<p>我们还看到用 <strong>@property</strong> 声明的属性 propertyInterface 和 propertyImplementation，编译器自动给我们生成了对应以下划线 _ 开头的 <strong>实例变量</strong>，这一部分也是个学问，后一部分再讲</p>
</blockquote>
<p>关于 <strong>成员变量</strong> 我认为就是 <strong>实例变量</strong>，两者等价，又或者仅仅只是 @interface 下的部分。<br><strong>当然有官方更准确的描述的，非常非常欢迎感谢前来指正！！！</strong></p>
<blockquote>
<p>概括一下：<br>咱们用比喻的修辞手法来说，<strong>属性</strong> 是个口袋，属性名称描述它是上衣口袋，裤兜，还是其他位置的口袋，没有有实际意义，只让外界看到有一个口袋，当然口袋也可以缝在里面（在 .m 文件里声明），只有自己知道，当然放在外面的，也有可能只是看起来像个口袋，不能装东西（.m 里使用了 @dynamic 但忘记自己实现 set get，后面再详细介绍），而 <strong>实例变量</strong> 就是在口袋里存放的实实在在的东西。</p>
</blockquote>
<h2 id="二-property，-synthesize，-dynamic"><a href="#二-property，-synthesize，-dynamic" class="headerlink" title="二. @property，@synthesize，@dynamic"></a>二. @property，@synthesize，@dynamic</h2><ul>
<li><strong>@property</strong> <ul>
<li>属性声明关键字，有三个类别的关键词分别描述该属性的：线程限制，内存管理，读写权限三方面的表现，默认情况下，基本数据类型为 atomic, assign, readwrite，OC 对象为 atomic, strong, readwrite</li>
<li>若 .m 文件不使用 @synthesize 和 @dynamic，编译器会自动生成属性的 set get 方法，并生成 已下划线 _ 加属性名的实例变量；</li>
</ul>
</li>
<li><strong>@synthesize</strong> <ul>
<li>@synthesize property; 这种情况下，编译器生成的实例变量没有了下滑下；</li>
<li>@synthesize property = _ivar; 这种情况下，编译器不再生成实例变量，对 property 调用set get 实际操作的是 _ivar 实例变量，即这个口袋里放的是 _ivar;</li>
</ul>
</li>
<li><strong>@dynamic</strong><ul>
<li>@dynamic property; 编译器不会生成实例变量，同时也不会实现 set get 方法，需要开发者自己手写，如若忘记自己实现 set get，碰到对 set get 进行的调用的地方，程序会 crash，报unrecognized selector的异常</li>
</ul>
</li>
</ul>
<p><br><br>end</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-属性，成员变量，实例变量&quot;&gt;&lt;a href=&quot;#一-属性，成员变量，实例变量&quot; class=&quot;headerlink&quot; title=&quot;一. 属性，成员变量，实例变量&quot;&gt;&lt;/a&gt;一. 属性，成员变量，实例变量&lt;/h2&gt;&lt;p&gt;在讨论之前我先给大家推荐一个 &lt;stro
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HMExpressionEvaluator——一个使用简单又强大的表达式计算库</title>
    <link href="http://yoursite.com/2017/06/14/HMExpressionEvaluator%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E5%8F%88%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%BA%93/"/>
    <id>http://yoursite.com/2017/06/14/HMExpressionEvaluator——一个使用简单又强大的表达式计算库/</id>
    <published>2017-06-14T09:03:23.000Z</published>
    <updated>2017-06-15T02:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/IOSLittleWhite/HMExpressionEvaluator" target="_blank" rel="external"> <strong>demo下载地址</strong></a></p>
<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><ol>
<li><p>一个数学表达式计算器，能实现和 <strong>UIWebView</strong> 的 stringByEvaluatingJavaScriptFromString: 一样的计算效果，但效率要高很多，可以在子线程中执行；</p>
</li>
<li><p>基本全面覆盖 <strong>NSExpression</strong> 的 expressionForFunction:arguments 中的所有function，使用要比 <strong>NSExpression</strong> 简单很多，只需将注意力放大expression表达式的编辑上，将任意复杂度的表达式，通过eval:方法传入便可轻松得到计算结果；</p>
</li>
<li><p>支持复杂加减乘除四则运算，与或非逻辑运算，和大于小于等比较运算；</p>
</li>
<li><p>支持三目运算；</p>
</li>
<li><p>表达式中能自动识别处理的函数，基本全部覆盖<strong>NSExpression</strong>，有的未实现的，因为可以自己有数学表达式表达，比如 a+b，这个表达式计算最基本功能，无需通过函数调用来实现；</p>
</li>
<li><p>以上所述的计算类型在符合数学表达式逻辑的前提下，可以组合在一个表达式中，函数支持嵌套调用；</p>
</li>
<li><p>支持字符串相加（字符串拼接）；</p>
</li>
<li><p>开发者可以扩展自己的函数，通过构建 <strong>HMExpressionFunction</strong> 对象来声明自定义的函数，详细使用方式可以参考 demo。</p>
</li>
</ol>
<h2 id="二-使用方式"><a href="#二-使用方式" class="headerlink" title="二. 使用方式"></a>二. 使用方式</h2><ol>
<li><p>引入头文件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import&quot;HMExpressionEvaluator.h&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>**HMExpressionEvaluator.h** 文件中只声明了4个方法：&lt;br&gt;
- -(id)eval:(NSString *)expression // 用于传入表达式进行计算并返回计算结果&lt;br&gt;
- -(void)setCustomFunctions:(NSDictionary *)customFunctions // 用于给开发者注册自定义方法&lt;br&gt;
- -(void)setDateFormatter:(NSDateFormatter *)dateFormatter // 设置支持的日期格式，默认只支持 yyyy-MM-dd HH:mm:ss 格式&lt;br&gt;
- -(void)withoutFunctionTransfer:(BOOL)withoutFunction; // 不支持函数调用，仅用于计算纯数学表达式，默认为支持函数调用&lt;br&gt;&lt;br&gt;
</code></pre><p>  开发者仅需通过这4个 <strong>API</strong> 来使用表达式计算全部功能<br><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// HMExpressionEvaluator.h</div><div class="line"></div><div class="line">   @interface HMExpressionEvaluator : NSObject</div><div class="line"></div><div class="line">#pragma mark - API</div><div class="line">/**</div><div class="line"> *  表达式计算</div><div class="line"> *</div><div class="line"> *  @param expression 需要计算的表达式</div><div class="line"> *</div><div class="line"> *  @return 计算结果</div><div class="line"> */</div><div class="line">- (id)eval:(NSString *)expression;</div><div class="line"></div><div class="line">/**</div><div class="line"> *	设置开发者自定义的函数集</div><div class="line"> *</div><div class="line"> *  @param customFunctions 每个函数用 HMExpressionCustomFunction 对象来描述，以函数名为 key</div><div class="line"> *                         </div><div class="line"> */</div><div class="line">- (void)setCustomFunctions:(NSDictionary *)customFunctions;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  设置支持的日期格式，默认只支持 yyyy-MM-dd HH:mm:ss 格式</div><div class="line"> *</div><div class="line"> *  @param dateFormat 日期格式</div><div class="line"> */</div><div class="line">- (void)setDateFormat:(NSString *)dateFormat;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  不支持函数调用，仅用于计算纯数学表达式，默认为支持函数调用</div><div class="line"> */</div><div class="line">- (void)withoutFunctionTransfer:(BOOL)withoutFunction;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<ol>
<li><p>具体使用方式</p>
<ol>
<li><p>支持的数学运算操作符和操作数类型</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">typedef NS_ENUM(NSInteger, HMExpressionNodeType)</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * 未知  0</div><div class="line">     */</div><div class="line">    Unknown,  </div><div class="line">      </div><div class="line">    /**</div><div class="line">     * + 加</div><div class="line">     */</div><div class="line">    Plus,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * - 减</div><div class="line">     */</div><div class="line">    Subtract,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * * 乘</div><div class="line">     */</div><div class="line">    MultiPly,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * / 除</div><div class="line">     */</div><div class="line">    Divide,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ( 左括号</div><div class="line">     */</div><div class="line">    LParentheses,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ) 右括号</div><div class="line">     */</div><div class="line">    RParentheses,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * % 求模,取余</div><div class="line">     */</div><div class="line">    Mod,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ^ 幂运算</div><div class="line">     */</div><div class="line">    Power,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &lt;&lt; 左移位</div><div class="line">     */</div><div class="line">    LShift,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &gt;&gt; 右移位</div><div class="line">     */</div><div class="line">    RShift,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &amp; 按位与</div><div class="line">     */</div><div class="line">    BitwiseAnd,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * | 按位或</div><div class="line">     */</div><div class="line">    BitwiseOr,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &amp;&amp; 逻辑与</div><div class="line">     */</div><div class="line">    And,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * || 逻辑或</div><div class="line">     */</div><div class="line">    Or,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ! 逻辑非</div><div class="line">     */</div><div class="line">    Not,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * == 比较等</div><div class="line">     */</div><div class="line">    Equal,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * != 或 &lt;&gt; 比较不等</div><div class="line">     */</div><div class="line">    Unequal,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &gt; 比较大于</div><div class="line">     */</div><div class="line">    GT,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &lt; 比较小于</div><div class="line">     */</div><div class="line">    LT,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &gt;= 比较大于等于</div><div class="line">     */</div><div class="line">    GTOrEqual,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &lt;= 比较小于等于</div><div class="line">     */</div><div class="line">    LTOrEqual,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 数值</div><div class="line">     */</div><div class="line">    Numeric,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 字符串</div><div class="line">     */</div><div class="line">    String,</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 日期时间</div><div class="line">     */</div><div class="line">    Datetime</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>使用示例</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 简单四则运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;22 + 33 * 66 + 3^5&quot;]; // 3^5 3的5次方</div><div class="line"></div><div class="line">// 简单比较运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;5 &lt; 6&quot;];</div><div class="line"></div><div class="line">// 逻辑运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;5 &lt; 3 || 6 &gt; 5)&quot;];</div><div class="line"></div><div class="line">// 位运算</div><div class="line">[HMExpressionEvaluator eval:@&quot;4 &lt;&lt; 5&quot;];</div><div class="line"></div><div class="line">// 字符串相加</div><div class="line">[HMExpressionEvaluator eval:@&quot;\&quot;Hello\&quot; + \&quot; \&quot; + \&quot;World\&quot; &lt;&lt; 5&quot;];</div></pre></td></tr></table></figure>
</li>
<li><p>包含函数的运算</p>
<ol>
<li><p>支持的函数清单</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">	// 逻辑运算类</div><div class="line">    ternaryOperation(5&lt;7, \&quot;真\&quot;, \&quot;假\&quot;) // 三目表达式</div><div class="line"></div><div class="line">    日期类处理方法, 日期字符串格式要求为：yyyy-MM-dd或者yyyy-MM-dd HH:mm:ss</div><div class="line">    dateDiff(差值类型, 较早日期, 较晚日期) // 时间差值</div><div class="line">    getYear(date) // 获取日期中的年份</div><div class="line">    getQuarter(date) // 获取日期中的第几季度</div><div class="line">    getLocalQuarter(date) // 获取日期中的中文第几季度</div><div class="line">    getMonth(date) // 获取日期中的月份</div><div class="line">    getLocalMonth(date) // 获取日期中的中文月份</div><div class="line">    getWeek(date) // 获取日期中的第几周</div><div class="line">    getLocalWeek(date) // 获取日期中的中文第几周</div><div class="line">    getDayOfWeek(date) // 获取日期中的星期几</div><div class="line">    getLocalDayOfWeek(date) // 获取日期中的中文星期几</div><div class="line">    getDay(date) // 获取日子</div><div class="line">    getLocalDay // 获取中文日子</div><div class="line">    now() // 获取现在时间</div><div class="line"></div><div class="line">    // 数值类</div><div class="line">    getLocalMoney(digit) // 将数值转换为大写金额</div><div class="line">    round(digit) // 数值四舍五入</div><div class="line">    ceil(digit) // 数值0舍1入</div><div class="line">    trunc(digit) // 向下取整</div><div class="line">    floor(digit) // 向下取整</div><div class="line">    abs(digit) // 求绝对值</div><div class="line">    sqrt(digit) // 开平方</div><div class="line">    log(digit) // 底数为e对数</div><div class="line">    ln(digit) // 底数为e对数</div><div class="line">    log10(digit) // 底数为10对数</div><div class="line">    log2(digit) // 底数为2对数</div><div class="line">    raiseToPower(x, n) // 计算 x 的 n 次方</div><div class="line">    exp(digit) // 求e的x次方</div><div class="line">    bitwiseXor(a, b) // a 异或 b</div><div class="line">    onesComplement(a) // a 的补码</div><div class="line">    average(digit, digit, ...) // 求平均</div><div class="line">    sum(digit, digit, ...) // 求和</div><div class="line">    count(digit, digit, ...) // 计数</div><div class="line">    min(digit, digit, ...) // 找最小值</div><div class="line">    max(digit, digit, ...) // 找最大值</div><div class="line">    median(digit, digit, ...) // 找中值</div><div class="line">    mode(digit, digit, ...) // 一数组或数据区域中出现频率最多的数值</div><div class="line">    stddev(digit, digit, ...) // 样本标准偏差</div><div class="line">    random(void) // 获取随机数小数</div><div class="line">    randomn(digit) // 获取随机数整数</div><div class="line"></div><div class="line">    // 字符串类</div><div class="line">    contains(&quot;待检字符串&quot;, &quot;被包含字符串&quot;) // 检查包含子字符串</div><div class="line">    unContains(&quot;待检字符串&quot;, &quot;不被包含字符串&quot;) // 检查不包含子字符串</div><div class="line">    lowercase(&quot;字符串&quot;) // 转小写</div><div class="line">    uppercase(&quot;字符串&quot;) // 转大写</div><div class="line">	``` </div><div class="line">2. 调用方式</div><div class="line">	</div><div class="line">	```Objective-C</div><div class="line">	// 三目运算函数</div><div class="line">	[HMExpressionEvaluator eval:@&quot;ternaryOperation(5&lt;7, \&quot;真\&quot;, \&quot;假\&quot;)&quot;];</div><div class="line">	</div><div class="line">	// 获取大写金额</div><div class="line">	[HMExpressionEvaluator eval:@&quot;getLocalMoney(10086)&quot;];</div><div class="line">	</div><div class="line">	// 复杂混合运算表达式</div><div class="line">	[HMExpressionEvaluator eval:@&quot;dateDiff(\&quot;dd\&quot;, \&quot;2016-12-17\&quot;, now()) * 10 - getYear(now()) + max(11, 22,33,1000) * sqrt(floor(1000.445))&quot;];</div></pre></td></tr></table></figure>
</li>
<li><p>自定义函数的使用，以 demo 为例：<br> <br><br><strong>第一步：自定义方法的OC实现</strong><br> <br><br>demo 中在 ViewController.m 实现了如下四个方法，可以看到返回时，均构建了 HMExpressionCustomFunctionResult 类实例来返回，这是必须的；<br> <br> 方法中传入的 param 会根据表达式中调用函数时括号内传入的参数情况解析成字符串，一维数组，或者二维数组，具体规则看如下代码段的注释。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 自定义函数测试</div><div class="line">/*</div><div class="line"> *  不带参函数</div><div class="line"> *  在表达式中写入 test1()</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test1</div><div class="line">&#123;</div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:@&quot;测试不带参函数&quot;</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString] ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  带一个加单参数的函数</div><div class="line"> *</div><div class="line"> *  @param param 如在表达式中写：test2(123) 则此处 param 为: @&quot;123&quot;</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test2:(id)param</div><div class="line">&#123;</div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:[NSString stringWithFormat:@&quot;测试带参函数，传入参数为：%@&quot;, param]</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  一维多参函数，将所有参数拼接成一个字符串</div><div class="line"> *  如表达式中写：test3(123, 456, 789...) 数量根据自己的需要来定</div><div class="line"> *</div><div class="line"> *  @param param 此处得到 param 为一维数组 @[@&quot;123&quot;, @&quot;456&quot;, @&quot;789&quot;...]</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test3:(id)param</div><div class="line">&#123;</div><div class="line">    // 将所有参数拼接成一个字符串</div><div class="line">    </div><div class="line">    NSMutableString *result = [NSMutableString string];</div><div class="line">    for(NSString *str in param)</div><div class="line">    &#123;</div><div class="line">        [result appendString:str];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:result</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> *  二维多参函数，函数功能为将所有参数拼接为字符串</div><div class="line"> *  如表达式中写：test3(123, [456, 789], @&quot;333&quot;, [234]...) 数量根据自己的需要来定</div><div class="line"> *</div><div class="line"> *  @param param 此处得到 param 为二维数组 @[@&quot;123&quot;, @[@&quot;456&quot;, @&quot;789&quot;], @&quot;333&quot;, @[@&quot;234&quot;]...]</div><div class="line"> *</div><div class="line"> *  @return 创建 HMExpressionFunctionResult 实例，返回函数运行结果</div><div class="line"> */</div><div class="line">- (HMExpressionCustomFunctionResult *)test4:(id)param</div><div class="line">&#123;</div><div class="line">    NSMutableString *result = [NSMutableString string];</div><div class="line">    </div><div class="line">    for(id obj in param)</div><div class="line">    &#123;</div><div class="line">        if([obj isKindOfClass:[NSArray class]])</div><div class="line">        &#123;</div><div class="line">            for(NSString *str in (NSArray *)obj)</div><div class="line">            &#123;</div><div class="line">                [result appendString:str];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            [result appendString:obj];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [[HMExpressionCustomFunctionResult alloc] initWithResult:result</div><div class="line">                                                     dataType:HMExpressionCustomFunctionResultDataTypeString];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>第二步：构建 HMExpressionCustomFunction 实例</strong><br> <br><br>如下代码将上述四个 test 方法分别构建一个 HMExpressionCustomFunction 实例来进行描述，并以用于表达式调用的函数名为 key 存入字典，准备注入表达式解析计算器中。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (NSDictionary *)customFunctions</div><div class="line">&#123;</div><div class="line">    if(!_customFunctions)</div><div class="line">    &#123;</div><div class="line">        _customFunctions = [NSMutableDictionary dictionary];</div><div class="line">        // test1 无参函数</div><div class="line">        HMExpressionCustomFunction *function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test1&quot;</div><div class="line">                                                                                                         selector:@selector(test1)</div><div class="line">                                                                                                           target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">        // test2 带一个参数的函数</div><div class="line">        function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test2&quot;</div><div class="line">                                                                        selector:@selector(test2:)</div><div class="line">                                                                          target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">        // test3 带多个一维参数的函数</div><div class="line">        function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test3&quot;</div><div class="line">                                                                        selector:@selector(test3:)</div><div class="line">                                                                          target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">        // test4 带多个二维参数的函数</div><div class="line">        function = [[HMExpressionCustomFunction alloc] initWithFunctionName:@&quot;test4&quot;</div><div class="line">                                                                        selector:@selector(test4:)</div><div class="line">                                                                          target:self];</div><div class="line">        [_customFunctions setObject:function forKey:function.functionName];</div><div class="line">    &#125;</div><div class="line">    return _customFunctions;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>第三步：将构建好的 HMExpressionCustomFunction 实例注入表达式解析计算器</strong><br> <br><br>代码如下，即在 demo 中点击 “计算” 按钮时执行的代码</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  创建表达式计算器对象</div><div class="line"> */</div><div class="line">- (HMExpressionEvaluator *)evaluator</div><div class="line">&#123;</div><div class="line">    if(!_evaluator)</div><div class="line">    &#123;</div><div class="line">        _evaluator = [[HMExpressionEvaluator alloc] init];</div><div class="line">        [_evaluator setCustomFunctions:self.customFunctions]; // 注入自定义函数集</div><div class="line">        </div><div class="line">         // 默认就是这个格式</div><div class="line">         // [_evaluator setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;];</div><div class="line">        </div><div class="line">         // 默认就是 false，即表达式支持函数调用，当表达式不需要函数调用是，调用该方法置为 true，可以调高运算效率</div><div class="line">         // [_evaluator withoutFunctionTransfer:false];</div><div class="line">    &#125;</div><div class="line">    return _evaluator;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="最后上图看看运行效果"><a href="#最后上图看看运行效果" class="headerlink" title="最后上图看看运行效果"></a>最后上图看看运行效果</h1><p><img src="http://upload-images.jianshu.io/upload_images/931410-8906ec964cf91fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1. 开始运行.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-83b7bd70bcd6a820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2. 选择函数.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-68665b6115bd610b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3. 选择指定测试用例.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-932d39cac3fa373f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4. 选择确定输入到了输入框.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-cf719fb086124172.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5. 表达式无误完成计算.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/931410-2a8c3bcc21de0bdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6. 表达式有错误计算失败.png"></p>
<p><br><br>感兴趣请下载demo研究，运行后，点击快速测试，快速一睹 HMExpressionValuator 的风采吧！</p>
<p><a href="https://github.com/IOSLittleWhite/HMExpressionEvaluator" target="_blank" rel="external"> <strong>demo下载地址</strong></a></p>
<p>意见建议请联系：</p>
<p><strong>QQ: 247159603</strong></p>
<p><strong>简书：</strong> <a href="http://www.jianshu.com/u/9f166a0db301" target="_blank" rel="external"> <strong>JZ_Stone</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/IOSLittleWhite/HMExpressionEvaluator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;strong&gt;demo下载地址&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
  </entry>
  
</feed>
